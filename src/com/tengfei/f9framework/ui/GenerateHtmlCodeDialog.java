package com.tengfei.f9framework.ui;

import com.intellij.database.psi.DbTable;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.ValidationInfo;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.tengfei.f9framework.entity.TableInfo;
import com.tengfei.f9framework.notification.F9Notifier;
import com.tengfei.f9framework.service.TableCodeGenerateService;
import com.tengfei.f9framework.util.F9ChooseFileUtil;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

public class GenerateHtmlCodeDialog extends DialogWrapper {
    private final Project project;
    private final DbTable dbTable;
    private final TableCodeGenerateService codeGenerateService;
    private JPanel contentPane;
    private JCheckBox addHtml;
    private JCheckBox listHtml;
    private JCheckBox editHtml;
    private JCheckBox detailHtml;
    private JCheckBox all;

    public GenerateHtmlCodeDialog(Project project, DbTable dbTable) {
        super(project);
        setTitle("Generate Html Code");
        init();
        setSize(420, 330);
        this.project = project;
        this.dbTable = dbTable;
        codeGenerateService = TableCodeGenerateService.getInstance(project);

        //my code
        all.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addHtml.setSelected(all.isSelected());
                listHtml.setSelected(all.isSelected());
                editHtml.setSelected(all.isSelected());
                detailHtml.setSelected(all.isSelected());
            }
        });
    }

    public void open() {
        show();
    }

    @Nullable
    @Override
    protected JComponent createCenterPanel() {
        return contentPane;
    }

    @Nullable
    @Override
    protected ValidationInfo doValidate() {
        if (!(addHtml.isSelected() || listHtml.isSelected() || editHtml.isSelected() || detailHtml.isSelected())) {
            return new ValidationInfo("You should at least select one!");
        }

        return null;
    }

    @Override
    protected void doOKAction() {
        super.doOKAction();
        // add your code here
        TableInfo tableInfo = new TableInfo(dbTable);

        dispose();

        //choose a directory
        VirtualFile directory = F9ChooseFileUtil.chooseDirectory(project);
        if (directory == null) {
            //do nothing
            F9Notifier.notifyMessage(project, "未选择任何目录");
            return;
        }

        if (addHtml.isSelected()) {
            codeGenerateService.generateAddHtmlFile(tableInfo, directory);
            F9Notifier.notifyMessage(project, "add html 生成完毕");
        }

        if (listHtml.isSelected()) {
            codeGenerateService.generateListHtmlFile(tableInfo, directory);
            F9Notifier.notifyMessage(project, "list html 生成完毕");

        }

        if (editHtml.isSelected()) {
            codeGenerateService.generateEditHtmlFile(tableInfo, directory);
            F9Notifier.notifyMessage(project, "edit html 生成完毕");

        }

        if (detailHtml.isSelected()) {
            codeGenerateService.generateDetailHtmlFile(tableInfo, directory);
            F9Notifier.notifyMessage(project, "detail html 生成完毕");

        }
    }

    @Override
    public boolean isAutoAdjustable() {
        return false;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addHtml = new JCheckBox();
        addHtml.setSelected(true);
        addHtml.setText("Add");
        panel1.add(addHtml, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        listHtml = new JCheckBox();
        listHtml.setEnabled(true);
        listHtml.setSelected(true);
        listHtml.setText("List");
        panel1.add(listHtml, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        editHtml = new JCheckBox();
        editHtml.setSelected(true);
        editHtml.setText("Edit");
        panel1.add(editHtml, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        detailHtml = new JCheckBox();
        detailHtml.setSelected(true);
        detailHtml.setText("Detail");
        panel1.add(detailHtml, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1, true, false));
        contentPane.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        all = new JCheckBox();
        all.setSelected(true);
        all.setText("All");
        panel2.add(all, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel2.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel2.add(spacer3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
